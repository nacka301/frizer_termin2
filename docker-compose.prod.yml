version: '3.8'

services:
  app:
    build: .
    container_name: frizerke-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://frizerke_user:${POSTGRES_PASSWORD}@postgres:5432/frizerke_db
      - SESSION_SECRET=${SESSION_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - frizerke-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: frizerke-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=frizerke_db
      - POSTGRES_USER=frizerke_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Bind only to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frizerke_user -d frizerke_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - frizerke-network
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c shared_preload_libraries=pg_stat_statements

volumes:
  postgres_data:
  postgres_logs:
  app_logs:

networks:
  frizerke-network:
    driver: bridge
